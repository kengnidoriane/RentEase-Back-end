// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  password               String
  firstName              String
  lastName               String
  phone                  String
  userType               UserType
  profilePicture         String?
  isVerified             Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  lastActiveAt           DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  
  properties             Property[]
  sentMessages           Message[]               @relation("MessageSender")
  receivedMessages       Message[]               @relation("MessageReceiver")
  favorites              Favorite[]
  verificationDocuments  VerificationDocument[]
  notifications          Notification[]
  notificationPreferences NotificationPreference[]
  adminActivityLogs      AdminActivityLog[]
  
  @@index([email])
  @@index([userType])
  @@index([isVerified])
  @@index([isActive])
  @@index([createdAt])
  @@index([lastActiveAt])
  @@map("users")
}

model Property {
  id                 String            @id @default(cuid())
  title              String
  description        String
  price              Decimal
  currency           String            @default("EUR")
  propertyType       PropertyType
  bedrooms           Int
  bathrooms          Int
  area               Decimal
  address            String
  city               String
  latitude           Decimal
  longitude          Decimal
  isVerified         Boolean           @default(false)
  isActive           Boolean           @default(true)
  verificationStatus VerificationStatus @default(PENDING)
  rejectionReason    String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  landlordId         String
  landlord           User              @relation(fields: [landlordId], references: [id])
  images             PropertyImage[]
  favorites          Favorite[]
  messages           Message[]
  
  @@index([landlordId])
  @@index([city])
  @@index([propertyType])
  @@index([price])
  @@index([bedrooms])
  @@index([isVerified])
  @@index([isActive])
  @@index([verificationStatus])
  @@index([createdAt])
  @@index([latitude, longitude])
  @@index([city, propertyType])
  @@index([price, bedrooms])
  @@index([isVerified, isActive])
  @@map("properties")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  conversationId String
  
  senderId       String
  sender         User     @relation("MessageSender", fields: [senderId], references: [id])
  receiverId     String
  receiver       User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  propertyId     String
  property       Property @relation(fields: [propertyId], references: [id])
  
  @@index([senderId])
  @@index([receiverId])
  @@index([propertyId])
  @@index([conversationId])
  @@index([isRead])
  @@index([createdAt])
  @@index([senderId, receiverId])
  @@index([conversationId, createdAt])
  @@map("messages")
}

model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  
  @@unique([userId, propertyId])
  @@map("favorites")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  altText    String
  order      Int
  
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  
  @@map("property_images")
}

model VerificationDocument {
  id              String            @id @default(cuid())
  documentType    DocumentType
  documentUrl     String
  status          VerificationStatus @default(PENDING)
  rejectionReason String?
  uploadedAt      DateTime          @default(now())
  reviewedAt      DateTime?
  
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  
  @@map("verification_documents")
}

enum UserType {
  TENANT
  LANDLORD
  ADMIN
}

enum PropertyType {
  APARTMENT
  ROOM
  HOUSE
  STUDIO
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  ID
  PROPERTY_OWNERSHIP
  PROOF_OF_ADDRESS
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean           @default(false)
  channel     NotificationChannel
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  createdAt   DateTime          @default(now())
  
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([status])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, type])
  @@map("notifications")
}

model NotificationPreference {
  id                    String            @id @default(cuid())
  notificationType      NotificationType
  emailEnabled          Boolean           @default(true)
  webPushEnabled        Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  userId                String
  user                  User              @relation(fields: [userId], references: [id])
  
  @@unique([userId, notificationType])
  @@map("notification_preferences")
}

enum NotificationType {
  NEW_MESSAGE
  FAVORITE_UNAVAILABLE
  PROPERTY_VERIFIED
  NEW_LISTING_MATCH
  REMINDER_INACTIVE
  PROPERTY_APPROVED
  PROPERTY_REJECTED
}

enum NotificationChannel {
  EMAIL
  WEB_PUSH
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

model AdminActivityLog {
  id          String      @id @default(cuid())
  action      AdminAction
  targetType  String
  targetId    String
  details     Json
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime    @default(now())
  
  adminId     String
  admin       User        @relation(fields: [adminId], references: [id])
  
  @@index([adminId])
  @@index([action])
  @@index([targetType])
  @@index([targetId])
  @@index([timestamp])
  @@index([adminId, timestamp])
  @@index([action, timestamp])
  @@map("admin_activity_logs")
}

enum AdminAction {
  USER_STATUS_UPDATED
  USER_SUSPENDED
  USER_ACTIVATED
  PROPERTY_APPROVED
  PROPERTY_REJECTED
  DOCUMENT_APPROVED
  DOCUMENT_REJECTED
  ADMIN_LOGIN
  ADMIN_LOGOUT
}